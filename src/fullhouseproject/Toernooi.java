/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fullhouseproject;

import com.sun.glass.events.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nour al Zahraa
 */
public class Toernooi extends javax.swing.JFrame {
    private BeginScherm beginscherm;
    /**
     * Creates new form Toernooi
     */
    public Toernooi() {
        initComponents();
        tabelToernooi();
    }
    
   
    public Connection MySqlConnection()
    {
      Connection conn=null;
      try
      {
            String url = "jdbc:mysql://meru.hhs.nl:3306/18011276";
            String username= "18011276";
            String password = "Wueg7vahVi";
           conn = DriverManager.getConnection(url,username,password);
              // JOptionPane.showMessageDialog(null,"Werkt wel!");
               return conn;
      }
      catch(Exception e)
      {
         JOptionPane.showMessageDialog(null,"Werkt niet!");
         return null;
      }
      
    }
    public ArrayList<ToernooiVariable> getToernooi()
    {
        ArrayList<ToernooiVariable>toernooien =  new ArrayList<ToernooiVariable>();
        Connection conn = MySqlConnection();
        String query = "select * from toernooi";
        Statement st;
        ResultSet rs;
        try
        {
            st = conn.createStatement();
            rs = st.executeQuery(query);
            
            while(rs.next())
            {
                ToernooiVariable toernooiV = new ToernooiVariable 
                (rs.getString("naam"),
                rs.getString("locatie"),
                rs.getString("datum")
                ,rs.getString("beginEindTijd")
                ,rs.getString("beschrijving")
                ,rs.getString("condities")
                ,rs.getInt("maxInschrijving")
                ,rs.getInt("inleggeld")
                ,rs.getString("uiterste_inschrijfdatum")
                ,rs.getInt("ronde"));
                toernooien.add(toernooiV);     
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        return toernooien;
    }
    public void tabelToernooi()
    {
        ArrayList<ToernooiVariable> toernooi = getToernooi();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object[] row = new Object[10];
        for(int i = 0; i<toernooi.size();i++)
        {
            row[0] = toernooi.get(i).getNaam();
            row[1] = toernooi.get(i).getLocatie();
            row[2] = toernooi.get(i).getDatum();
            row[3] = toernooi.get(i).getBeginEindTijd();
            row[4] = toernooi.get(i).getBeschrijving();
            row[5] = toernooi.get(i).getCondities();
            row[6] = toernooi.get(i).getMaxInschrijving();
            row[7] = toernooi.get(i).getInleggeld();
            row[8] = toernooi.get(i).getUiterste_inschrijfdatum();
            row[9] = toernooi.get(i).getRonde();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelNaam = new javax.swing.JLabel();
        labelLocatie = new javax.swing.JLabel();
        labelDatum = new javax.swing.JLabel();
        labelBeginEindTijd = new javax.swing.JLabel();
        labelBeschrijving = new javax.swing.JLabel();
        labelMaxInschrijving = new javax.swing.JLabel();
        textNaam = new javax.swing.JTextField();
        textBeginEindTijd = new javax.swing.JTextField();
        labelCondities = new javax.swing.JLabel();
        buttonNieuw = new javax.swing.JButton();
        buttonWijzigen = new javax.swing.JButton();
        buttonOpslaan = new javax.swing.JButton();
        buttonVerwijderen = new javax.swing.JButton();
        labelToernooiZoeken = new javax.swing.JLabel();
        textToernooiZoeken = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        labelInleggeld = new javax.swing.JLabel();
        textMaxInschrijving = new javax.swing.JTextField();
        labelInschrijfdatum = new javax.swing.JLabel();
        textCondities = new javax.swing.JTextField();
        inschrijfdatum = new com.toedter.calendar.JDateChooser();
        labelRonde = new javax.swing.JLabel();
        datum = new com.toedter.calendar.JDateChooser();
        textBeschrijving = new javax.swing.JTextField();
        textInleggeld = new javax.swing.JTextField();
        textRonde = new javax.swing.JTextField();
        comboboxLocatie = new javax.swing.JComboBox<>();
        back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buttonTotaalInleggeld = new javax.swing.JButton();
        LabelTotaalInleggeld = new javax.swing.JLabel();
        ButtonInleggeldBetaald = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(255, 255, 51));

        labelNaam.setText("Naam: ");

        labelLocatie.setText("Locatie: ");

        labelDatum.setText("Datum: ");

        labelBeginEindTijd.setText("BeginEindTijd:");

        labelBeschrijving.setText("Beschrijving:");

        labelMaxInschrijving.setText("MaxInschrijving:");

        labelCondities.setText("Condities");

        buttonNieuw.setText("Nieuw");
        buttonNieuw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNieuwActionPerformed(evt);
            }
        });

        buttonWijzigen.setText("Wijzigen");
        buttonWijzigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWijzigenActionPerformed(evt);
            }
        });

        buttonOpslaan.setText("Opslaan");
        buttonOpslaan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpslaanActionPerformed(evt);
            }
        });

        buttonVerwijderen.setText("Verwijderen");
        buttonVerwijderen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVerwijderenActionPerformed(evt);
            }
        });

        labelToernooiZoeken.setText("Toernooi zoeken");

        textToernooiZoeken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textToernooiZoekenActionPerformed(evt);
            }
        });
        textToernooiZoeken.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textToernooiZoekenKeyReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Naam", "Locatie", "Datum", "BeginEindTijd", "Beschrijving", "Condities", "MaxInschrijving", "Inleggeld", "Inschrijfdatum", "Ronde"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
        }

        labelInleggeld.setText("Inleggeld:");

        textMaxInschrijving.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textMaxInschrijvingKeyTyped(evt);
            }
        });

        labelInschrijfdatum.setText("Uiterste inschrijfdatum:");

        inschrijfdatum.setDateFormatString("dd-MM-yyyy");

        labelRonde.setText("Ronde: ");

        datum.setDateFormatString("dd-MM-yyyy");

        textInleggeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textInleggeldKeyTyped(evt);
            }
        });

        textRonde.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textRondeKeyTyped(evt);
            }
        });

        comboboxLocatie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Den Haag", "Amsterdam", "Utrecht", "Rotterdam", "Groningen", "Rijswijk" }));

        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel1.setText("Totaal inleggeld");

        buttonTotaalInleggeld.setText("TotaalInleggeld");
        buttonTotaalInleggeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTotaalInleggeldActionPerformed(evt);
            }
        });

        ButtonInleggeldBetaald.setText("inleggeld betaald?");
        ButtonInleggeldBetaald.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonInleggeldBetaaldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNaam)
                    .addComponent(labelBeschrijving)
                    .addComponent(labelInschrijfdatum)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(labelLocatie)
                                        .addGap(87, 87, 87))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(labelInleggeld, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(32, 32, 32))
                                        .addComponent(labelToernooiZoeken, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelMaxInschrijving, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(labelDatum)
                                    .addComponent(labelBeginEindTijd)
                                    .addComponent(labelCondities))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelRonde)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textBeschrijving)
                                    .addComponent(textNaam, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(textMaxInschrijving)
                                    .addComponent(textBeginEindTijd)
                                    .addComponent(textCondities, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(datum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textInleggeld)
                                    .addComponent(comboboxLocatie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(LabelTotaalInleggeld, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textToernooiZoeken, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(inschrijfdatum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(textRonde, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(123, 123, 123)))
                .addGap(168, 168, 168)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonTotaalInleggeld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonWijzigen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOpslaan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonNieuw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonVerwijderen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonInleggeldBetaald, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(310, 310, 310))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNaam)
                    .addComponent(textNaam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNieuw, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonOpslaan, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelLocatie)
                            .addComponent(comboboxLocatie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelDatum)
                            .addComponent(datum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelBeginEindTijd)
                            .addComponent(textBeginEindTijd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelBeschrijving)
                                .addGap(26, 26, 26))
                            .addComponent(textBeschrijving)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonWijzigen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(buttonVerwijderen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCondities)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textCondities, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textMaxInschrijving, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMaxInschrijving))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInleggeld)
                    .addComponent(textInleggeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTotaalInleggeld, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelInschrijfdatum)
                            .addComponent(inschrijfdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelRonde)
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelToernooiZoeken, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textToernooiZoeken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(textRonde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(ButtonInleggeldBetaald, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelTotaalInleggeld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNieuwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNieuwActionPerformed
        textNaam.setText("");
        textBeginEindTijd.setText("");
        textMaxInschrijving.setText("");
        textCondities.setText("");
        inschrijfdatum.setCalendar(null);
        datum.setCalendar(null);
        textBeschrijving.setText("");
        textCondities.setText("");
        textInleggeld.setText("");
        textRonde.setText("");
    }//GEN-LAST:event_buttonNieuwActionPerformed

    private void buttonWijzigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWijzigenActionPerformed
        if(textNaam!=null && datum!=null)
        {
            String query = "update toernooi set locatie=?, datum=?, beginEindTijd=?, beschrijving=?, condities=?, maxInschrijving=?, inleggeld=?, Uiterste_inschrijfdatum=?, ronde=? where naam=?";
            PreparedStatement ps = null;
            Connection conn = MySqlConnection();
            
            try
            {
              ps = conn.prepareStatement(query);
              String waardeLocatie = comboboxLocatie.getSelectedItem().toString();
              ps.setString(1, waardeLocatie);
              SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
              String waardeDatum =sdf.format(datum.getDate());
              ps.setString(2, waardeDatum);
              ps.setString(3, textBeginEindTijd.getText());
              ps.setString(4,textBeschrijving.getText());
              ps.setString(5,textCondities.getText());
              ps.setInt(6,Integer.parseInt(textMaxInschrijving.getText()));
              ps.setInt(7,Integer.parseInt(textInleggeld.getText()));
              String waardeInschrijfDatum = sdf.format(inschrijfdatum.getDate());
              ps.setString(8, waardeInschrijfDatum);
              ps.setInt(9, Integer.parseInt(textRonde.getText()));
              ps.setString(10,textNaam.getText());
              
              int res = ps.executeUpdate();
              // hier moet nog komen dat die tabel wordt gevuld
              if(res >= 1)
              {
                  JOptionPane.showMessageDialog(null, "De toernooi is geupdated :)");
              }
              else
              {
                  JOptionPane.showMessageDialog(null, "De toernooi updaten is mislukt!");
              }
              textNaam.setText("");
        textBeginEindTijd.setText("");
        textMaxInschrijving.setText("");
        textCondities.setText("");
        inschrijfdatum.setCalendar(null);
        datum.setCalendar(null);
        textBeschrijving.setText("");
        textCondities.setText("");
        textInleggeld.setText("");
        textRonde.setText("");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Updaten is mislukt");
        }
    }//GEN-LAST:event_buttonWijzigenActionPerformed

    private void buttonOpslaanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpslaanActionPerformed
        if(textNaam!=null&&datum!=null){
            try{
                Connection conn = MySqlConnection();
                String query = "insert into toernooi (naam, locatie, datum, beginEindTijd, beschrijving, condities, maxInschrijving, inleggeld, Uiterste_inschrijfdatum, ronde) values"
                                + "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(query);
                
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                String waardeDatum = sdf.format(datum.getDate());
                String waardeInschrijfdatum = sdf.format(inschrijfdatum.getDate());
                String waardeLocatie = comboboxLocatie.getSelectedItem().toString();
                
                ps.setString(1, textNaam.getText());
                ps.setString(2, waardeLocatie);
                ps.setString(3, waardeDatum);
                ps.setString(4, textBeginEindTijd.getText());
                ps.setString(5, textBeschrijving.getText());
                ps.setString(6, textCondities.getText());
                ps.setInt(7, Integer.parseInt(textMaxInschrijving.getText()));
                ps.setInt(8, Integer.parseInt(textInleggeld.getText()));
                ps.setString(9, waardeInschrijfdatum);          
                ps.setInt(10, Integer.parseInt(textRonde.getText()));

                int res = ps.executeUpdate();
                //tabelGast();
                if(res >= 1){
                    JOptionPane.showMessageDialog(null, res + "De toernooi is toegevoegd aan het systeem :)");
                }else{
                    JOptionPane.showMessageDialog(null, "Toernooi toevoegen is mislukt :(");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }          
            textNaam.setText("");
            textBeginEindTijd.setText("");
            textMaxInschrijving.setText("");
            textCondities.setText("");
            inschrijfdatum.setCalendar(null);
            datum.setCalendar(null);
            textBeschrijving.setText("");
            textCondities.setText("");
            textInleggeld.setText("");
            textRonde.setText("");
        }else{
            JOptionPane.showMessageDialog(null, "Toernooi gegevens zijn niet compleet");
        }

    }//GEN-LAST:event_buttonOpslaanActionPerformed

    private void buttonVerwijderenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVerwijderenActionPerformed
        if(textNaam.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Graag naam invoeren van de gast die verwijderd moet worden!");
        }else{
            try{
                String query = "delete from toernooi where naam=?";
                Connection conn = beginscherm.MySqlConnection();
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, textNaam.getText().toString());
                int res = ps.executeUpdate();
                //tabelGast();
                if(res>=1){
                    JOptionPane.showMessageDialog(null, "Gast is verwijderd");
                }else{
                    JOptionPane.showMessageDialog(null, "Gast is niet gevonden!");
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        textNaam.setText("");
    }//GEN-LAST:event_buttonVerwijderenActionPerformed

    private void textToernooiZoekenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textToernooiZoekenActionPerformed

    }//GEN-LAST:event_textToernooiZoekenActionPerformed

    private void textToernooiZoekenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textToernooiZoekenKeyReleased
       // textToernooiZoeken.getText().toString();
        ArrayList<ToernooiVariable>al = null;
        al = new ArrayList<ToernooiVariable>();
        String val = textToernooiZoeken.getText().toString();
        try{
            Connection conn = MySqlConnection();
            String query = "select * from toernooi where naam like '%" + val + "%'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                ToernooiVariable toernooiV = new ToernooiVariable 
                (rs.getString("naam"),
                rs.getString("locatie"),
                rs.getString("datum")
                ,rs.getString("beginEindTijd")
                ,rs.getString("beschrijving")
                ,rs.getString("condities")
                ,rs.getInt("maxInschrijving")
                ,rs.getInt("inleggeld")
                ,rs.getString("uiterste_inschrijfdatum")
                ,rs.getInt("ronde"));
                al.add(toernooiV);
            }
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            model.setRowCount(0);
            Object[] row = new Object[10];
            for(int i = 0; i<al.size();i++){
                row[0] = al.get(i).getNaam();
                row[1] = al.get(i).getLocatie();
                row[2] = al.get(i).getDatum();
                row[3] = al.get(i).getBeginEindTijd();
                row[4] = al.get(i).getBeschrijving();
                row[5] = al.get(i).getCondities();
                row[6] = al.get(i).getMaxInschrijving();
                row[7] = al.get(i).getInleggeld();
                row[8] = al.get(i).getUiterste_inschrijfdatum();
                row[9] = al.get(i).getRonde();
                model.addRow(row);
            }
        } catch (Exception e) {
            System.out.println("eror: "+e);
        }
        
    }//GEN-LAST:event_textToernooiZoekenKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        try {
            DefaultTableModel tmodel = (DefaultTableModel)jTable1.getModel();

            int selectRowIndex = jTable1.getSelectedRow();
            Date date = new SimpleDateFormat("dd-MM-yyyy").parse((String)tmodel.getValueAt(selectRowIndex, 8));
            Date date1 = new SimpleDateFormat("dd-MM-yyyy").parse((String)tmodel.getValueAt(selectRowIndex, 2));
            
            textNaam.setText(tmodel.getValueAt(selectRowIndex,0).toString());
            comboboxLocatie.setSelectedItem(tmodel.getValueAt(selectRowIndex,1).toString());
            datum.setDate(date1);
            textBeginEindTijd.setText(tmodel.getValueAt(selectRowIndex,3).toString());
            textBeschrijving.setText(tmodel.getValueAt(selectRowIndex,4).toString());
            textCondities.setText(tmodel.getValueAt(selectRowIndex,5).toString());
            textMaxInschrijving.setText(tmodel.getValueAt(selectRowIndex,6).toString());
            textInleggeld.setText(tmodel.getValueAt(selectRowIndex,7).toString());
            inschrijfdatum.setDate(date);
            textRonde.setText(tmodel.getValueAt(selectRowIndex,9).toString());


        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        this.hide();
        StartScherm start = new StartScherm();
        start.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void textMaxInschrijvingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMaxInschrijvingKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();
        if(!(Character.isDigit(c)|| (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_textMaxInschrijvingKeyTyped

    private void textInleggeldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textInleggeldKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();
        if(!(Character.isDigit(c)|| (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_textInleggeldKeyTyped

    private void textRondeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRondeKeyTyped
        // TODO add your handling code here:
         char c = evt.getKeyChar();
        if(!(Character.isDigit(c)|| (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_textRondeKeyTyped

    private void buttonTotaalInleggeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTotaalInleggeldActionPerformed
    double sum = 0;
    try{
    Connection con = MySqlConnection();
    Statement st = con.createStatement();
    ResultSet res = st.executeQuery("SELECT SUM(gewonnenInleggeld) FROM gast");
    while (res.next()) {
      double c = res.getInt(1);
      sum = sum + c;
        }
        //System.out.println("Sum of column = " + sum);
        LabelTotaalInleggeld.setText(""+sum);
        
    }
    catch(Exception e)
        {
          System.out.println(e);
        }
    }//GEN-LAST:event_buttonTotaalInleggeldActionPerformed

    private void ButtonInleggeldBetaaldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonInleggeldBetaaldActionPerformed
        ArrayList<ToernooiVariable>al = null;
        al = new ArrayList<ToernooiVariable>();
        String val = textToernooiZoeken.getText().toString();
        try{
            Connection conn = MySqlConnection();
            String query = "select * FROM toernooi where inleggeld is null";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                ToernooiVariable toernooiV = new ToernooiVariable 
                (rs.getString("naam"),
                rs.getString("locatie"),
                rs.getString("datum")
                ,rs.getString("beginEindTijd")
                ,rs.getString("beschrijving")
                ,rs.getString("condities")
                ,rs.getInt("maxInschrijving")
                ,rs.getInt("inleggeld")
                ,rs.getString("uiterste_inschrijfdatum")
                ,rs.getInt("ronde"));
                al.add(toernooiV);
            }
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            model.setRowCount(0);
            Object[] row = new Object[10];
            for(int i = 0; i<al.size();i++){
                row[0] = al.get(i).getNaam();
                row[1] = al.get(i).getLocatie();
                row[2] = al.get(i).getDatum();
                row[3] = al.get(i).getBeginEindTijd();
                row[4] = al.get(i).getBeschrijving();
                row[5] = al.get(i).getCondities();
                row[6] = al.get(i).getMaxInschrijving();
                row[7] = al.get(i).getInleggeld();
                row[8] = al.get(i).getUiterste_inschrijfdatum();
                row[9] = al.get(i).getRonde();
                model.addRow(row);
            }
        } catch (Exception e) {
            System.out.println("eror: "+e);
        }
        
    }//GEN-LAST:event_ButtonInleggeldBetaaldActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Toernooi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Toernooi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Toernooi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Toernooi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Toernooi().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonInleggeldBetaald;
    private javax.swing.JLabel LabelTotaalInleggeld;
    private javax.swing.JButton back;
    private javax.swing.JButton buttonNieuw;
    private javax.swing.JButton buttonOpslaan;
    private javax.swing.JButton buttonTotaalInleggeld;
    private javax.swing.JButton buttonVerwijderen;
    private javax.swing.JButton buttonWijzigen;
    private javax.swing.JComboBox<String> comboboxLocatie;
    private com.toedter.calendar.JDateChooser datum;
    private com.toedter.calendar.JDateChooser inschrijfdatum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelBeginEindTijd;
    private javax.swing.JLabel labelBeschrijving;
    private javax.swing.JLabel labelCondities;
    private javax.swing.JLabel labelDatum;
    private javax.swing.JLabel labelInleggeld;
    private javax.swing.JLabel labelInschrijfdatum;
    private javax.swing.JLabel labelLocatie;
    private javax.swing.JLabel labelMaxInschrijving;
    private javax.swing.JLabel labelNaam;
    private javax.swing.JLabel labelRonde;
    private javax.swing.JLabel labelToernooiZoeken;
    private javax.swing.JTextField textBeginEindTijd;
    private javax.swing.JTextField textBeschrijving;
    private javax.swing.JTextField textCondities;
    private javax.swing.JTextField textInleggeld;
    private javax.swing.JTextField textMaxInschrijving;
    private javax.swing.JTextField textNaam;
    private javax.swing.JTextField textRonde;
    private javax.swing.JTextField textToernooiZoeken;
    // End of variables declaration//GEN-END:variables
}
